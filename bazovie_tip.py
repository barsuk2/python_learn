
"---МНОЖЕСТВА---"
#Множества – это неупорядоченные коллекции уникальных и неизменяемых объектов\
X = set('приветт') #Множества создаются встроенной функцией set или с помощью новых синтаксических конструкций определения литералов и генераторовмножеств, появившихся в версии 3.0, и поддерживают типичные математические операции
Y = {'п', 'а', 'т','т'}
X_1=b'adasdaasda'
print('множество-',X,'множество-',Y)
print('Пересечение-',X&Y) # Пересечение
print('Объединение-',X | Y) # Объединение

p={x ** 2 for x in [1, 2, 3, 4]} # Генератор множеств в 3.0
print(p)

"---СПИСКИ---"
L1 = [2, 3, 4,2,3,4]
L2=L1[:] # копирование
L3=L1 # ссылка на список
L1[0]=24
print('L1-',L1,'L2-',L2,'L3-', L3)

"---СЛОВАРИ---"
my_dict={'a':1,'d':2}
print(my_dict)








my_float = 1.2
my_float = float('1.2')

my_float = float('nan')  # nan — «не число» (NaN — not-a-number)

my_float = float('inf')  # inf — бесконечность
my_float = float('+inf')  # inf — бесконечность
my_float = float('-inf')  # -inf — минус бесконечность

import decimal # Вещественные числа с фиксированной точностью
d = decimal.Decimal('3.141')
print( d + 1)
from fractions import Fraction # Рациональные числа: числитель+знаменатель
f = Fraction(2, 3)
print( f + 1)
print( 1 > 2, 1 < 2) # Логические значения
X = None # Специальный объект None
l=[None]*4
print([X]*5) # Инициализация списка сотней объектов None
print(type(X_1)) # Типы: переменная L представляет объект типа list
if type(X_1) == bytes: # Проверка типа, если в этом есть необходимость...
	print('yes')
#Классы, определяемые пользователем
I=20
I_2=21
print( hex(I))	#шестнадцатеричные 
print( oct(I))	#восьмеричные
print( bin(I))	#двоичные
print( I!=I_2)	#не равно
print( int(3.1415)) # Усекает дробную часть вещественного числа)	
print( float(3)) # Усекает дробную часть вещественного числа)	
print( 4,3) # Усекает дробную часть вещественного числа)	
a = 5 # Создается имя
b = 4
c=2
num = 1 / 3
print( repr(num)) # # Используется для автоматического вывода: в форме как есть
print( str(num)) # 
print('Проверка на равенство', 2.0 == 2.0, 2 is 2) # # Проверка на равенство значений
print( 2.0 != 1.0) # # Проверка на равенство значений
print( a<b<c) # # Проверка на равенство значений
print( c/a) # # Проверка на равенство значений
print(eval('64'), eval('0o100'), eval('0x40'), eval('0b1000000'))	#интерпретирует строку во входном аргументе как программный код на языке Python
print('{0:o}, {1:x}, {2:b}'.format(64, 64, 64))	#интерпретирует строку во входном аргументе как программный код на языке Python
x_2=1
print(x_2<<2)
import math
print( math.pi, math.e) # Распространенные константы
print( sum((1,5,4,8))) # Распространенные константы
